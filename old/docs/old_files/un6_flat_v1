/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   draw_rtv.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sgouifer <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/08/14 19:03:09 by sgouifer          #+#    #+#             */
/*   Updated: 2019/08/14 19:03:09 by sgouifer         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "rtv.h"


int intersectRaySphere_v1(t_ray *r, t_sphere *s)
{
    float A = vector_dot(&r->direction, &r->direction);
    t_vector dist = vector_sub(&r->start, &s->position);
    float B = 2 * vector_dot(&r->direction, &dist);
    float C = vector_dot(&dist, &dist) - (s->radius * s->radius);
    float discr = B * B - 4 * A * C;
    if (discr < 0)
        return 0;
    else
        return 1;
}


void draw_test(t_rtv *rtv)
{
    init_draw(rtv);

    int final_color = BLACK;

    //v1
    ///*
    int hit;
    t_sphere s;
    t_ray r;
    s.position = vector_new(200, 200, 100);
    s.radius = 100;
    s.c= BLUE;
    r.direction = vector_new(0, 0, 1);
    r.start.z = 0;
    //*/

 
    int x = 0;
    int y = 0;


    while (x < rtv->screen_w)
    {
        y = 0;
        //v1
        ///*
        r.start.x = x;
        //*/
        while (y < rtv->screen_h)
        {
            final_color = BLACK;

            //v1
            ///*
            r.start.y = y;
            hit = intersectRaySphere_v1(&r, &s);
            final_color = (hit) ? s.c : BLACK;
            //*/
            add_px(rtv, x, y, final_color);
            y++;
        }
        x++;
    }

    mlx_put_image_to_window(rtv->mlx, rtv->win, rtv->img_ptr, 0, 0);
    draw_axis(rtv);
}
