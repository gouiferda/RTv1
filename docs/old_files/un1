
                int i = 0;
                closer_obj = -1;
                int intersected_with_something;
                while (i < sphere_c)
                {
                    if (closer_obj == i)
                        continue;
                    int intersect_closest = (closer_obj != -1) ? intersect_v3(&primary_ray, &spheres[closer_obj]) : 0;
                    if (intersect_v3(&primary_ray, &spheres[i]) && closer_obj != 1)
                    {
                        final_color = spheres[i].color;
                    }
                    i++;
                }


                int intersect_0 = intersect_v3(&primary_ray, &spheres[0]);
                int intersect_1 = intersect_v3(&primary_ray, &spheres[1]);
                int intersect_2 = intersect_v3(&primary_ray, &spheres[2]);
                int intersect_closest = intersect_v3(&primary_ray, &spheres[closer_obj]);

                if (intersect_0 && !intersect_closest)
                {
                    final_color = spheres[0].color;
                }
                else if (intersect_2 && !intersect_closest)
                {
                    final_color = spheres[2].color;
                }else{
                    final_color = spheres[1].color;
                }
                if (!intersect_0 && !intersect_closest && !intersect_2)
                {
                    final_color = 0;
                }
                

                // if (closer_obj != -1)
                // {
                //     if (intersect_v3(&primary_ray, &spheres[closer_obj]))
                //     {
                //         final_color = spheres[closer_obj].color;
                //     }
                // }

                // if (intersect_v3(&primary_ray, &spheres[closer_obj]))
                //     {
                //         final_color = spheres[closer_obj].color;
                //     }else{
                //         final_color = 0;
                //     }

                // if (closer_obj != -1)
                // {
                //     final_color = spheres[closer_obj].color;
                //     //closer_obj = -1;
                // }else{
                //     final_color = 0;
                //     closer_obj = -1;
                // }

                /*
                int intersected = 0;
                int i = 0;
                while (i < sphere_c)
                {
                    if (intersect_v3(&primary_ray, &spheres[i]))
                    {
                        final_color = spheres[i].color;
                        intersected = 1;
                    }
                    i++;
                }
                if (!intersected)
                    final_color = 0;
                */

                // int i = 0;
                // while (i < sphere_c)
                // {
                //     if (intersect_v3(&primary_ray, &spheres[i]))
                //     {
                //          if (spheres[i].position.z - spheres[i].radius < min_dist)
                //          {
                //             min_dist = spheres[i].position.z - spheres[i].radius;
                //             closer_obj = i;
                //         }
                //        // final_color = spheres[i].color;
                //     }
                //     i++;
                // }
                // if (closer_obj != -1)
                // {
                //     if (intersect_v3(&primary_ray, &spheres[closer_obj]))
                //     {
                //         final_color = spheres[closer_obj].color;
                //     }else{
                //         final_color = spheres[0].color;
                //     }
                // }
